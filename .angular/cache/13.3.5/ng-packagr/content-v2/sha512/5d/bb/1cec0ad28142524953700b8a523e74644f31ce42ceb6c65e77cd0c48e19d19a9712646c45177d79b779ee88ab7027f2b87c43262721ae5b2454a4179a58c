{"hash":"4c39cbc9874a80584e112902ab7ba861e50236d7","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, SkipSelf, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpEventType, HttpClientModule } from '@angular/common/http';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass AngularFileUploaderComponent {\n    constructor(http) {\n        this.http = http;\n        this.resetUpload = false;\n        // Outputs\n        this.ApiResponse = new EventEmitter();\n        this.fileSelected = new EventEmitter();\n        this.allowedFiles = [];\n        this.notAllowedFiles = [];\n        this.Caption = [];\n        this.isAllowedFileSingle = true;\n        this.progressBarShow = false;\n        this.enableUploadBtn = false;\n        this.uploadMsg = false;\n        this.afterUpload = false;\n        this.uploadStarted = false;\n        this.currentUploads = [];\n        this.fileNameIndex = true;\n        this.withCredentials = false;\n        this.autoUpload = false;\n        this.idDate = +new Date();\n    }\n    ngOnChanges(changes) {\n        // Track changes in Configuration and see if user has even provided Configuration.\n        if (changes.config && this.config) {\n            // Assign User Configurations to Library Properties.\n            this.theme = this.config.theme || '';\n            this.id =\n                this.config.id ||\n                    parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\n                        Math.floor(Math.random() * 20) * 10000;\n            this.hideProgressBar = this.config.hideProgressBar || false;\n            this.hideResetBtn = this.config.hideResetBtn || false;\n            this.hideSelectBtn = this.config.hideSelectBtn || false;\n            this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n            this.uploadAPI = this.config.uploadAPI.url;\n            this.method = this.config.uploadAPI.method || 'POST';\n            this.formatsAllowed = this.config.formatsAllowed || '*';\n            this.formatsAllowedText =\n                this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n            this.multiple = this.config.multiple || false;\n            this.headers = this.config.uploadAPI.headers || {};\n            this.params = this.config.uploadAPI.params || {};\n            this.responseType = this.config.uploadAPI.responseType || 'json';\n            this.withCredentials = this.config.uploadAPI.withCredentials || false;\n            this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n            this.autoUpload = this.config.autoUpload || false;\n            this.replaceTexts = {\n                selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n                resetBtn: 'Reset',\n                uploadBtn: 'Upload',\n                dragNDropBox: 'Drag N Drop',\n                attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n                afterUploadMsg_success: 'Successfully Uploaded !',\n                afterUploadMsg_error: 'Upload Failed !',\n                sizeLimit: 'Size Limit',\n            }; // default replaceText.\n            if (this.config.replaceTexts) {\n                // updated replaceText if user has provided any.\n                this.replaceTexts = {\n                    ...this.replaceTexts,\n                    ...this.config.replaceTexts,\n                };\n            }\n        }\n        // Reset when resetUpload value changes from false to true.\n        if (changes.resetUpload) {\n            if (changes.resetUpload.currentValue === true) {\n                this.resetFileUpload();\n            }\n        }\n    }\n    // Reset following properties.\n    resetFileUpload() {\n        this.allowedFiles = [];\n        this.Caption = [];\n        this.notAllowedFiles = [];\n        this.uploadMsg = false;\n        this.enableUploadBtn = false;\n    }\n    // When user selects files.\n    onChange(event) {\n        this.fileSelected.emit(event);\n        this.notAllowedFiles = [];\n        const fileExtRegExp = /(?:\\.([^.]+))?$/;\n        let fileList;\n        if (this.afterUpload || !this.multiple) {\n            this.allowedFiles = [];\n            this.Caption = [];\n            this.afterUpload = false;\n        }\n        if (event.type === 'drop') {\n            fileList = event.dataTransfer.files;\n        }\n        else {\n            fileList = event.target.files || event.srcElement.files;\n        }\n        // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n        for (let i = 0; i < fileList.length; i++) {\n            const currentFileExt = fileExtRegExp\n                .exec(fileList[i].name)[1]\n                .toLowerCase(); // Get file extension.\n            const isFormatValid = this.formatsAllowed.includes('*')\n                ? true\n                : this.formatsAllowed.includes(currentFileExt);\n            const isSizeValid = fileList[i].size <= this.maxSize;\n            // Check whether current file format and size is correct as specified in the configurations.\n            if (isFormatValid && isSizeValid) {\n                this.allowedFiles.push(fileList[i]);\n            }\n            else {\n                this.notAllowedFiles.push({\n                    fileName: fileList[i].name,\n                    fileSize: this.convertSize(fileList[i].size),\n                    errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\n                });\n            }\n        }\n        // If there's any allowedFiles.\n        if (this.allowedFiles.length > 0) {\n            this.enableUploadBtn = true;\n            // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n            if (this.theme === 'attachPin' || this.autoUpload) {\n                this.uploadFiles();\n            }\n        }\n        else {\n            this.enableUploadBtn = false;\n        }\n        this.uploadMsg = false;\n        this.uploadStarted = false;\n        this.uploadPercent = 0;\n        event.target.value = null;\n    }\n    uploadFiles() {\n        this.progressBarShow = true;\n        this.uploadStarted = true;\n        this.notAllowedFiles = [];\n        let isError = false;\n        this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n        const formData = new FormData();\n        // Add data to be sent in this request\n        this.allowedFiles.forEach((file, i) => {\n            formData.append(this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''), this.allowedFiles[i]);\n        });\n        /*\n        Not Working, Headers null\n        // Contruct Headers\n        const headers = new HttpHeaders();\n        for (const key of Object.keys(this.headers)) {\n          headers.append(key, this.headers[key]);\n        }\n    \n        // Contruct Params\n        const params = new HttpParams();\n        for (const key of Object.keys(this.params)) {\n          params.append(key, this.params[key]);\n        } */\n        this.http\n            .request(this.method.toUpperCase(), this.uploadAPI, {\n            body: formData,\n            reportProgress: true,\n            observe: 'events',\n            headers: this.headers,\n            params: this.params,\n            responseType: this.responseType,\n            withCredentials: this.withCredentials,\n        })\n            .subscribe((event) => {\n            // Upload Progress\n            if (event.type === HttpEventType.UploadProgress) {\n                this.enableUploadBtn = false; // button should be disabled if process uploading\n                const currentDone = event.loaded / event.total;\n                this.uploadPercent = Math.round((event.loaded / event.total) * 100);\n            }\n            else if (event.type === HttpEventType.Response) {\n                if (event.status === 200 || event.status === 201) {\n                    // Success\n                    this.progressBarShow = false;\n                    this.enableUploadBtn = false;\n                    this.uploadMsg = true;\n                    this.afterUpload = true;\n                    if (!isError) {\n                        this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                        this.uploadMsgClass = 'text-success lead';\n                    }\n                }\n                else {\n                    // Failure\n                    isError = true;\n                    this.handleErrors();\n                }\n                this.ApiResponse.emit(event);\n            }\n            else {\n                //console.log('Event Other: ', event);\n            }\n        }, (error) => {\n            // Failure\n            isError = true;\n            this.handleErrors();\n            this.ApiResponse.emit(error);\n        });\n    }\n    handleErrors() {\n        this.progressBarShow = false;\n        this.enableUploadBtn = false;\n        this.uploadMsg = true;\n        this.afterUpload = true;\n        this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n        this.uploadMsgClass = 'text-danger lead';\n    }\n    removeFile(i, sf_na) {\n        if (sf_na === 'sf') {\n            this.allowedFiles.splice(i, 1);\n            this.Caption.splice(i, 1);\n        }\n        else {\n            this.notAllowedFiles.splice(i, 1);\n        }\n        if (this.allowedFiles.length === 0) {\n            this.enableUploadBtn = false;\n        }\n    }\n    convertSize(fileSize) {\n        return fileSize < 1024000\n            ? (fileSize / 1024).toFixed(2) + ' KB'\n            : (fileSize / 1024000).toFixed(2) + ' MB';\n    }\n    attachpinOnclick() {\n        const element = document.getElementById('sel' + this.id);\n        if (element !== null) {\n            element.click();\n        }\n    }\n    drop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.onChange(event);\n    }\n    allowDrop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'copy';\n    }\n}\nAngularFileUploaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderComponent, deps: [{ token: i1.HttpClient, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\nAngularFileUploaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.8\", type: AngularFileUploaderComponent, selector: \"angular-file-uploader\", inputs: { config: \"config\", resetUpload: \"resetUpload\" }, outputs: { ApiResponse: \"ApiResponse\", fileSelected: \"fileSelected\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\" *ngIf=\\\"(theme !== 'attachPin')\\\" id=\\\"default\\\">\\n\\n  <!-- Drag n Drop theme Starts -->\\n  <div *ngIf=\\\"theme == 'dragNDrop'\\\" id=\\\"dragNDrop\\\"\\n    [ngClass]=\\\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\\\" class=\\\"dragNDrop\\\">\\n    <div style=\\\"position:relative;\\\">\\n      <div id=\\\"div1\\\" class=\\\"div1 afu-dragndrop-box\\\" (drop)=\\\"drop($event)\\\" (dragover)=\\\"allowDrop($event)\\\">\\n        <p class=\\\"afu-dragndrop-text\\\">{{replaceTexts?.dragNDropBox}}</p>\\n      </div>\\n      <!-- <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span> -->\\n    </div>\\n  </div>\\n  <!-- Drag n Drop theme Ends -->\\n\\n  <label for=\\\"sel{{id}}\\\" class=\\\"btn btn-primary btn-sm afu-select-btn\\\" [ngClass]=\\\"progressBarShow ? 'disabled' : null\\\"\\n    *ngIf=\\\"!hideSelectBtn\\\">{{replaceTexts?.selectFileBtn}}</label>\\n  <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" style=\\\"display: none\\\" *ngIf=\\\"!hideSelectBtn\\\" [disabled]=\\\"progressBarShow\\\"\\n    (change)=\\\"onChange($event)\\\" title=\\\"Select file\\\" name=\\\"files[]\\\" [accept]=formatsAllowed\\n    [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n  <button class=\\\"btn btn-info btn-sm resetBtn afu-reset-btn\\\" (click)=\\\"resetFileUpload()\\\" *ngIf=\\\"!hideResetBtn\\\"\\n    [disabled]=\\\"progressBarShow\\\">{{replaceTexts?.resetBtn}}</button>\\n  <br *ngIf=\\\"!hideSelectBtn\\\">\\n  <p class=\\\"constraints-info afu-constraints-info\\\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\\n    {{(convertSize(maxSize))}}\\n  </p>\\n  <!--Allowed file list-->\\n  <div class=\\\"row afu-valid-file\\\" *ngFor=\\\"let sf of allowedFiles;let i=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span class=\\\"text-primary\\\">{{sf.name}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\\n    <!--  <input class=\\\"col-xs-3 progress caption\\\"  type=\\\"text\\\"  placeholder=\\\"Caption..\\\"  [(ngModel)]=\\\"Caption[i]\\\"  *ngIf=\\\"!uploadStarted\\\"/> -->\\n    <div class=\\\"progress col-xs-3 padMarg afu-progress-bar\\\"\\n      *ngIf=\\\"isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <a class=\\\"col-xs-1\\\" role=\\\"button\\\" (click)=\\\"removeFile(i,'sf')\\\" *ngIf=\\\"!uploadStarted\\\"><i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n  <!--Not Allowed file list-->\\n  <div class=\\\"row text-danger afu-invalid-file\\\" *ngFor=\\\"let na of notAllowedFiles;let j=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span>{{na['fileName']}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{na['fileSize']}})</strong></p>\\n    <p class=\\\"col-xs-3 \\\">{{na['errorMsg']}}</p>\\n    <a class=\\\"col-xs-1 delFileIcon\\\" role=\\\"button\\\" (click)=\\\"removeFile(j,'na')\\\" *ngIf=\\\"!uploadStarted\\\">&nbsp;<i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n\\n  <p *ngIf=\\\"uploadMsg\\\" class=\\\"{{uploadMsgClass}} + afu-upload-status\\\">{{uploadMsgText}}\\n  <p>\\n  <div *ngIf=\\\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n    <div class=\\\"progress col-xs-4 padMarg afu-progress-bar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <br>\\n    <br>\\n  </div>\\n  <button class=\\\"btn btn-success afu-upload-btn\\\" type=\\\"button\\\" (click)=\\\"uploadFiles()\\\"\\n    [disabled]=\\\"!enableUploadBtn && progressBarShow\\\" *ngIf=\\\"!autoUpload\\\">{{replaceTexts?.uploadBtn}}</button>\\n  <br>\\n</div>\\n\\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\\n<div *ngIf=\\\"theme == 'attachPin'\\\" id=\\\"attachPin\\\">\\n  <div style=\\\"position:relative;padding-left:6px\\\">\\n    <a class='btn up_btn afu-attach-pin' (click)=\\\"attachpinOnclick()\\\">\\n      {{replaceTexts?.attachPinBtn}}\\n      <i class=\\\"fa fa-paperclip\\\" aria-hidden=\\\"true\\\"></i>\\n      <!-- <p style=\\\"margin-top:10px\\\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\\n      <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" (change)=\\\"onChange($event)\\\" style=\\\"display: none\\\" title=\\\"Select file\\\"\\n        name=\\\"files[]\\\" [accept]=formatsAllowed [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n      <br>\\n    </a>\\n    &nbsp;\\n    <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span>\\n  </div>\\n</div>\", styles: [\".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid rgb(92,91,91);border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.selectBtnDisabled{border:1px solid #999999;background-color:#ccc;color:#666;cursor:no-drop}.dragNDrop .div1{display:border-box;border:2px dashed rgb(92,91,91);height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width: 620px){.caption{padding:0}}@media screen and (max-width: 510px){.sizeC{width:25%}}@media screen and (max-width: 260px){.sizeC,.caption{font-size:10px}}.resetBtn{margin-left:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'angular-file-uploader', template: \"<div class=\\\"container\\\" *ngIf=\\\"(theme !== 'attachPin')\\\" id=\\\"default\\\">\\n\\n  <!-- Drag n Drop theme Starts -->\\n  <div *ngIf=\\\"theme == 'dragNDrop'\\\" id=\\\"dragNDrop\\\"\\n    [ngClass]=\\\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\\\" class=\\\"dragNDrop\\\">\\n    <div style=\\\"position:relative;\\\">\\n      <div id=\\\"div1\\\" class=\\\"div1 afu-dragndrop-box\\\" (drop)=\\\"drop($event)\\\" (dragover)=\\\"allowDrop($event)\\\">\\n        <p class=\\\"afu-dragndrop-text\\\">{{replaceTexts?.dragNDropBox}}</p>\\n      </div>\\n      <!-- <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span> -->\\n    </div>\\n  </div>\\n  <!-- Drag n Drop theme Ends -->\\n\\n  <label for=\\\"sel{{id}}\\\" class=\\\"btn btn-primary btn-sm afu-select-btn\\\" [ngClass]=\\\"progressBarShow ? 'disabled' : null\\\"\\n    *ngIf=\\\"!hideSelectBtn\\\">{{replaceTexts?.selectFileBtn}}</label>\\n  <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" style=\\\"display: none\\\" *ngIf=\\\"!hideSelectBtn\\\" [disabled]=\\\"progressBarShow\\\"\\n    (change)=\\\"onChange($event)\\\" title=\\\"Select file\\\" name=\\\"files[]\\\" [accept]=formatsAllowed\\n    [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n  <button class=\\\"btn btn-info btn-sm resetBtn afu-reset-btn\\\" (click)=\\\"resetFileUpload()\\\" *ngIf=\\\"!hideResetBtn\\\"\\n    [disabled]=\\\"progressBarShow\\\">{{replaceTexts?.resetBtn}}</button>\\n  <br *ngIf=\\\"!hideSelectBtn\\\">\\n  <p class=\\\"constraints-info afu-constraints-info\\\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\\n    {{(convertSize(maxSize))}}\\n  </p>\\n  <!--Allowed file list-->\\n  <div class=\\\"row afu-valid-file\\\" *ngFor=\\\"let sf of allowedFiles;let i=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span class=\\\"text-primary\\\">{{sf.name}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\\n    <!--  <input class=\\\"col-xs-3 progress caption\\\"  type=\\\"text\\\"  placeholder=\\\"Caption..\\\"  [(ngModel)]=\\\"Caption[i]\\\"  *ngIf=\\\"!uploadStarted\\\"/> -->\\n    <div class=\\\"progress col-xs-3 padMarg afu-progress-bar\\\"\\n      *ngIf=\\\"isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <a class=\\\"col-xs-1\\\" role=\\\"button\\\" (click)=\\\"removeFile(i,'sf')\\\" *ngIf=\\\"!uploadStarted\\\"><i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n  <!--Not Allowed file list-->\\n  <div class=\\\"row text-danger afu-invalid-file\\\" *ngFor=\\\"let na of notAllowedFiles;let j=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span>{{na['fileName']}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{na['fileSize']}})</strong></p>\\n    <p class=\\\"col-xs-3 \\\">{{na['errorMsg']}}</p>\\n    <a class=\\\"col-xs-1 delFileIcon\\\" role=\\\"button\\\" (click)=\\\"removeFile(j,'na')\\\" *ngIf=\\\"!uploadStarted\\\">&nbsp;<i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n\\n  <p *ngIf=\\\"uploadMsg\\\" class=\\\"{{uploadMsgClass}} + afu-upload-status\\\">{{uploadMsgText}}\\n  <p>\\n  <div *ngIf=\\\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n    <div class=\\\"progress col-xs-4 padMarg afu-progress-bar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <br>\\n    <br>\\n  </div>\\n  <button class=\\\"btn btn-success afu-upload-btn\\\" type=\\\"button\\\" (click)=\\\"uploadFiles()\\\"\\n    [disabled]=\\\"!enableUploadBtn && progressBarShow\\\" *ngIf=\\\"!autoUpload\\\">{{replaceTexts?.uploadBtn}}</button>\\n  <br>\\n</div>\\n\\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\\n<div *ngIf=\\\"theme == 'attachPin'\\\" id=\\\"attachPin\\\">\\n  <div style=\\\"position:relative;padding-left:6px\\\">\\n    <a class='btn up_btn afu-attach-pin' (click)=\\\"attachpinOnclick()\\\">\\n      {{replaceTexts?.attachPinBtn}}\\n      <i class=\\\"fa fa-paperclip\\\" aria-hidden=\\\"true\\\"></i>\\n      <!-- <p style=\\\"margin-top:10px\\\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\\n      <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" (change)=\\\"onChange($event)\\\" style=\\\"display: none\\\" title=\\\"Select file\\\"\\n        name=\\\"files[]\\\" [accept]=formatsAllowed [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n      <br>\\n    </a>\\n    &nbsp;\\n    <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span>\\n  </div>\\n</div>\", styles: [\".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid rgb(92,91,91);border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.selectBtnDisabled{border:1px solid #999999;background-color:#ccc;color:#666;cursor:no-drop}.dragNDrop .div1{display:border-box;border:2px dashed rgb(92,91,91);height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width: 620px){.caption{padding:0}}@media screen and (max-width: 510px){.sizeC{width:25%}}@media screen and (max-width: 260px){.sizeC,.caption{font-size:10px}}.resetBtn{margin-left:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: SkipSelf\n                }] }]; }, propDecorators: { config: [{\n                type: Input\n            }], resetUpload: [{\n                type: Input\n            }], ApiResponse: [{\n                type: Output\n            }], fileSelected: [{\n                type: Output\n            }] } });\n\nclass AngularFileUploaderModule {\n}\nAngularFileUploaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFileUploaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, declarations: [AngularFileUploaderComponent], imports: [CommonModule,\n        HttpClientModule], exports: [AngularFileUploaderComponent] });\nAngularFileUploaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, imports: [[\n            CommonModule,\n            HttpClientModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        HttpClientModule,\n                    ],\n                    declarations: [AngularFileUploaderComponent],\n                    exports: [AngularFileUploaderComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-file-uploader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFileUploaderComponent, AngularFileUploaderModule };\n//# sourceMappingURL=angular-file-uploader.mjs.map\n","map":{"version":3,"file":"angular-file-uploader.mjs","sources":["../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.ts","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.html","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.module.ts","../../../projects/angular-file-uploader/src/public-api.ts","../../../projects/angular-file-uploader/src/angular-file-uploader.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  ReplaceTexts,\n  AngularFileUploaderConfig,\n  UploadInfo,\n  UploadApi,\n} from './angular-file-uploader.types';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpEventType,\n} from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'angular-file-uploader',\n  templateUrl: './angular-file-uploader.component.html',\n  styleUrls: ['./angular-file-uploader.component.css'],\n})\nexport class AngularFileUploaderComponent implements OnChanges {\n  // Inputs\n  @Input()\n  config: AngularFileUploaderConfig;\n\n  @Input()\n  resetUpload = false;\n\n  // Outputs\n  @Output()\n  ApiResponse = new EventEmitter();\n\n  @Output()\n  fileSelected: EventEmitter<UploadInfo[]> = new EventEmitter<UploadInfo[]>();\n\n  // Properties\n  theme: string;\n  id: number;\n  hideProgressBar: boolean;\n  maxSize: number;\n  uploadAPI: string;\n  method: string;\n  formatsAllowed: string;\n  formatsAllowedText: string;\n  multiple: boolean;\n  headers: HttpHeaders | { [header: string]: string | string[] };\n  params: HttpParams | { [param: string]: string | string[] };\n  responseType: 'json' | 'arraybuffer' | 'blob' | 'text';\n  hideResetBtn: boolean;\n  hideSelectBtn: boolean;\n  allowedFiles: File[] = [];\n  notAllowedFiles: {\n    fileName: string;\n    fileSize: string;\n    errorMsg: string;\n  }[] = [];\n  Caption: string[] = [];\n  isAllowedFileSingle = true;\n  progressBarShow = false;\n  enableUploadBtn = false;\n  uploadMsg = false;\n  afterUpload = false;\n  uploadStarted = false;\n  uploadMsgText: string;\n  uploadMsgClass: string;\n  uploadPercent: number;\n  replaceTexts: ReplaceTexts;\n  currentUploads: any[] = [];\n  fileNameIndex = true;\n  withCredentials = false;\n  autoUpload = false;\n\n  private idDate: number = +new Date();\n\n  constructor(@SkipSelf() private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Track changes in Configuration and see if user has even provided Configuration.\n    if (changes.config && this.config) {\n      // Assign User Configurations to Library Properties.\n      this.theme = this.config.theme || '';\n      this.id =\n        this.config.id ||\n        parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\n          Math.floor(Math.random() * 20) * 10000;\n      this.hideProgressBar = this.config.hideProgressBar || false;\n      this.hideResetBtn = this.config.hideResetBtn || false;\n      this.hideSelectBtn = this.config.hideSelectBtn || false;\n      this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n      this.uploadAPI = this.config.uploadAPI.url;\n      this.method = this.config.uploadAPI.method || 'POST';\n      this.formatsAllowed = this.config.formatsAllowed || '*';\n      this.formatsAllowedText =\n        this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n      this.multiple = this.config.multiple || false;\n      this.headers = this.config.uploadAPI.headers || {};\n      this.params = this.config.uploadAPI.params || {};\n      this.responseType = this.config.uploadAPI.responseType || 'json';\n      this.withCredentials = this.config.uploadAPI.withCredentials || false;\n      this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n      this.autoUpload = this.config.autoUpload || false;\n\n      this.replaceTexts = {\n        selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n        resetBtn: 'Reset',\n        uploadBtn: 'Upload',\n        dragNDropBox: 'Drag N Drop',\n        attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n        afterUploadMsg_success: 'Successfully Uploaded !',\n        afterUploadMsg_error: 'Upload Failed !',\n        sizeLimit: 'Size Limit',\n      }; // default replaceText.\n      if (this.config.replaceTexts) {\n        // updated replaceText if user has provided any.\n        this.replaceTexts = {\n          ...this.replaceTexts,\n          ...this.config.replaceTexts,\n        };\n      }\n    }\n\n    // Reset when resetUpload value changes from false to true.\n    if (changes.resetUpload) {\n      if (changes.resetUpload.currentValue === true) {\n        this.resetFileUpload();\n      }\n    }\n  }\n\n  // Reset following properties.\n  resetFileUpload() {\n    this.allowedFiles = [];\n    this.Caption = [];\n    this.notAllowedFiles = [];\n    this.uploadMsg = false;\n    this.enableUploadBtn = false;\n  }\n\n  // When user selects files.\n  onChange(event: any) {\n    this.fileSelected.emit(event);\n    this.notAllowedFiles = [];\n    const fileExtRegExp: RegExp = /(?:\\.([^.]+))?$/;\n    let fileList: FileList;\n\n    if (this.afterUpload || !this.multiple) {\n      this.allowedFiles = [];\n      this.Caption = [];\n      this.afterUpload = false;\n    }\n\n    if (event.type === 'drop') {\n      fileList = event.dataTransfer.files;\n    } else {\n      fileList = event.target.files || event.srcElement.files;\n    }\n\n    // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n    for (let i = 0; i < fileList.length; i++) {\n      const currentFileExt = fileExtRegExp\n        .exec(fileList[i].name)[1]\n        .toLowerCase(); // Get file extension.\n      const isFormatValid = this.formatsAllowed.includes('*')\n        ? true\n        : this.formatsAllowed.includes(currentFileExt);\n\n      const isSizeValid = fileList[i].size <= this.maxSize;\n\n      // Check whether current file format and size is correct as specified in the configurations.\n      if (isFormatValid && isSizeValid) {\n        this.allowedFiles.push(fileList[i]);\n      } else {\n        this.notAllowedFiles.push({\n          fileName: fileList[i].name,\n          fileSize: this.convertSize(fileList[i].size),\n          errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\n        });\n      }\n    }\n\n    // If there's any allowedFiles.\n    if (this.allowedFiles.length > 0) {\n      this.enableUploadBtn = true;\n      // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n      if (this.theme === 'attachPin' || this.autoUpload) {\n        this.uploadFiles();\n      }\n    } else {\n      this.enableUploadBtn = false;\n    }\n\n    this.uploadMsg = false;\n    this.uploadStarted = false;\n    this.uploadPercent = 0;\n    event.target.value = null;\n  }\n\n  uploadFiles() {\n    this.progressBarShow = true;\n    this.uploadStarted = true;\n    this.notAllowedFiles = [];\n    let isError = false;\n    this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n    const formData = new FormData();\n\n    // Add data to be sent in this request\n    this.allowedFiles.forEach((file, i) => {\n      formData.append(\n        this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''),\n        this.allowedFiles[i]\n      );\n    });\n\n    /*\n    Not Working, Headers null\n    // Contruct Headers\n    const headers = new HttpHeaders();\n    for (const key of Object.keys(this.headers)) {\n      headers.append(key, this.headers[key]);\n    }\n\n    // Contruct Params\n    const params = new HttpParams();\n    for (const key of Object.keys(this.params)) {\n      params.append(key, this.params[key]);\n    } */\n\n    this.http\n      .request(this.method.toUpperCase(), this.uploadAPI, {\n        body: formData,\n        reportProgress: true,\n        observe: 'events',\n        headers: this.headers,\n        params: this.params,\n        responseType: this.responseType,\n        withCredentials: this.withCredentials,\n      })\n      .subscribe(\n        (event) => {\n          // Upload Progress\n          if (event.type === HttpEventType.UploadProgress) {\n            this.enableUploadBtn = false; // button should be disabled if process uploading\n            const currentDone = event.loaded / event.total;\n            this.uploadPercent = Math.round((event.loaded / event.total) * 100);\n          } else if (event.type === HttpEventType.Response) {\n            if (event.status === 200 || event.status === 201) {\n              // Success\n              this.progressBarShow = false;\n              this.enableUploadBtn = false;\n              this.uploadMsg = true;\n              this.afterUpload = true;\n              if (!isError) {\n                this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                this.uploadMsgClass = 'text-success lead';\n              }\n            } else {\n              // Failure\n              isError = true;\n              this.handleErrors();\n            }\n\n            this.ApiResponse.emit(event);\n          } else {\n            //console.log('Event Other: ', event);\n          }\n        },\n        (error) => {\n          // Failure\n          isError = true;\n          this.handleErrors();\n          this.ApiResponse.emit(error);\n        }\n      );\n  }\n\n  handleErrors() {\n    this.progressBarShow = false;\n    this.enableUploadBtn = false;\n    this.uploadMsg = true;\n    this.afterUpload = true;\n    this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n    this.uploadMsgClass = 'text-danger lead';\n  }\n\n  removeFile(i: any, sf_na: any) {\n    if (sf_na === 'sf') {\n      this.allowedFiles.splice(i, 1);\n      this.Caption.splice(i, 1);\n    } else {\n      this.notAllowedFiles.splice(i, 1);\n    }\n\n    if (this.allowedFiles.length === 0) {\n      this.enableUploadBtn = false;\n    }\n  }\n\n  convertSize(fileSize: number): string {\n    return fileSize < 1024000\n      ? (fileSize / 1024).toFixed(2) + ' KB'\n      : (fileSize / 1024000).toFixed(2) + ' MB';\n  }\n\n  attachpinOnclick() {\n    const element = document.getElementById('sel' + this.id);\n    if (element !== null) {\n      element.click();\n    }\n  }\n\n  drop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    this.onChange(event);\n  }\n\n  allowDrop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\n","<div class=\"container\" *ngIf=\"(theme !== 'attachPin')\" id=\"default\">\n\n  <!-- Drag n Drop theme Starts -->\n  <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\"\n    [ngClass]=\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\" class=\"dragNDrop\">\n    <div style=\"position:relative;\">\n      <div id=\"div1\" class=\"div1 afu-dragndrop-box\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n        <p class=\"afu-dragndrop-text\">{{replaceTexts?.dragNDropBox}}</p>\n      </div>\n      <!-- <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span> -->\n    </div>\n  </div>\n  <!-- Drag n Drop theme Ends -->\n\n  <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm afu-select-btn\" [ngClass]=\"progressBarShow ? 'disabled' : null\"\n    *ngIf=\"!hideSelectBtn\">{{replaceTexts?.selectFileBtn}}</label>\n  <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" *ngIf=\"!hideSelectBtn\" [disabled]=\"progressBarShow\"\n    (change)=\"onChange($event)\" title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed\n    [attr.multiple]=\"multiple ? '' : null\" />\n  <button class=\"btn btn-info btn-sm resetBtn afu-reset-btn\" (click)=\"resetFileUpload()\" *ngIf=\"!hideResetBtn\"\n    [disabled]=\"progressBarShow\">{{replaceTexts?.resetBtn}}</button>\n  <br *ngIf=\"!hideSelectBtn\">\n  <p class=\"constraints-info afu-constraints-info\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\n    {{(convertSize(maxSize))}}\n  </p>\n  <!--Allowed file list-->\n  <div class=\"row afu-valid-file\" *ngFor=\"let sf of allowedFiles;let i=index\">\n    <p class=\"col-xs-3 textOverflow\"><span class=\"text-primary\">{{sf.name}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n    <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"!uploadStarted\"/> -->\n    <div class=\"progress col-xs-3 padMarg afu-progress-bar\"\n      *ngIf=\"isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"!uploadStarted\"><i\n        class=\"fa fa-times\"></i></a>\n  </div>\n  <!--Not Allowed file list-->\n  <div class=\"row text-danger afu-invalid-file\" *ngFor=\"let na of notAllowedFiles;let j=index\">\n    <p class=\"col-xs-3 textOverflow\"><span>{{na['fileName']}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{na['fileSize']}})</strong></p>\n    <p class=\"col-xs-3 \">{{na['errorMsg']}}</p>\n    <a class=\"col-xs-1 delFileIcon\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"!uploadStarted\">&nbsp;<i\n        class=\"fa fa-times\"></i></a>\n  </div>\n\n  <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}} + afu-upload-status\">{{uploadMsgText}}\n  <p>\n  <div *ngIf=\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n    <div class=\"progress col-xs-4 padMarg afu-progress-bar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <br>\n    <br>\n  </div>\n  <button class=\"btn btn-success afu-upload-btn\" type=\"button\" (click)=\"uploadFiles()\"\n    [disabled]=\"!enableUploadBtn && progressBarShow\" *ngIf=\"!autoUpload\">{{replaceTexts?.uploadBtn}}</button>\n  <br>\n</div>\n\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\n  <div style=\"position:relative;padding-left:6px\">\n    <a class='btn up_btn afu-attach-pin' (click)=\"attachpinOnclick()\">\n      {{replaceTexts?.attachPinBtn}}\n      <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n      <!-- <p style=\"margin-top:10px\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\n      <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\"\n        name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n      <br>\n    </a>\n    &nbsp;\n    <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularFileUploaderComponent } from './angular-file-uploader.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n  ],\n  declarations: [AngularFileUploaderComponent],\n  exports: [AngularFileUploaderComponent]\n})\nexport class AngularFileUploaderModule { }\n","/*\n * Public API Surface of angular-file-uploader\n */\n\nexport * from './lib/angular-file-uploader.component';\nexport * from './lib/angular-file-uploader.module';\nexport * from './lib/angular-file-uploader.types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, SkipSelf, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpEventType, HttpClientModule } from '@angular/common/http';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass AngularFileUploaderComponent {\n    constructor(http) {\n        this.http = http;\n        this.resetUpload = false;\n        // Outputs\n        this.ApiResponse = new EventEmitter();\n        this.fileSelected = new EventEmitter();\n        this.allowedFiles = [];\n        this.notAllowedFiles = [];\n        this.Caption = [];\n        this.isAllowedFileSingle = true;\n        this.progressBarShow = false;\n        this.enableUploadBtn = false;\n        this.uploadMsg = false;\n        this.afterUpload = false;\n        this.uploadStarted = false;\n        this.currentUploads = [];\n        this.fileNameIndex = true;\n        this.withCredentials = false;\n        this.autoUpload = false;\n        this.idDate = +new Date();\n    }\n    ngOnChanges(changes) {\n        // Track changes in Configuration and see if user has even provided Configuration.\n        if (changes.config && this.config) {\n            // Assign User Configurations to Library Properties.\n            this.theme = this.config.theme || '';\n            this.id =\n                this.config.id ||\n                    parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\n                        Math.floor(Math.random() * 20) * 10000;\n            this.hideProgressBar = this.config.hideProgressBar || false;\n            this.hideResetBtn = this.config.hideResetBtn || false;\n            this.hideSelectBtn = this.config.hideSelectBtn || false;\n            this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n            this.uploadAPI = this.config.uploadAPI.url;\n            this.method = this.config.uploadAPI.method || 'POST';\n            this.formatsAllowed = this.config.formatsAllowed || '*';\n            this.formatsAllowedText =\n                this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n            this.multiple = this.config.multiple || false;\n            this.headers = this.config.uploadAPI.headers || {};\n            this.params = this.config.uploadAPI.params || {};\n            this.responseType = this.config.uploadAPI.responseType || 'json';\n            this.withCredentials = this.config.uploadAPI.withCredentials || false;\n            this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n            this.autoUpload = this.config.autoUpload || false;\n            this.replaceTexts = {\n                selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n                resetBtn: 'Reset',\n                uploadBtn: 'Upload',\n                dragNDropBox: 'Drag N Drop',\n                attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n                afterUploadMsg_success: 'Successfully Uploaded !',\n                afterUploadMsg_error: 'Upload Failed !',\n                sizeLimit: 'Size Limit',\n            }; // default replaceText.\n            if (this.config.replaceTexts) {\n                // updated replaceText if user has provided any.\n                this.replaceTexts = Object.assign(Object.assign({}, this.replaceTexts), this.config.replaceTexts);\n            }\n        }\n        // Reset when resetUpload value changes from false to true.\n        if (changes.resetUpload) {\n            if (changes.resetUpload.currentValue === true) {\n                this.resetFileUpload();\n            }\n        }\n    }\n    // Reset following properties.\n    resetFileUpload() {\n        this.allowedFiles = [];\n        this.Caption = [];\n        this.notAllowedFiles = [];\n        this.uploadMsg = false;\n        this.enableUploadBtn = false;\n    }\n    // When user selects files.\n    onChange(event) {\n        this.fileSelected.emit(event);\n        this.notAllowedFiles = [];\n        const fileExtRegExp = /(?:\\.([^.]+))?$/;\n        let fileList;\n        if (this.afterUpload || !this.multiple) {\n            this.allowedFiles = [];\n            this.Caption = [];\n            this.afterUpload = false;\n        }\n        if (event.type === 'drop') {\n            fileList = event.dataTransfer.files;\n        }\n        else {\n            fileList = event.target.files || event.srcElement.files;\n        }\n        // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n        for (let i = 0; i < fileList.length; i++) {\n            const currentFileExt = fileExtRegExp\n                .exec(fileList[i].name)[1]\n                .toLowerCase(); // Get file extension.\n            const isFormatValid = this.formatsAllowed.includes('*')\n                ? true\n                : this.formatsAllowed.includes(currentFileExt);\n            const isSizeValid = fileList[i].size <= this.maxSize;\n            // Check whether current file format and size is correct as specified in the configurations.\n            if (isFormatValid && isSizeValid) {\n                this.allowedFiles.push(fileList[i]);\n            }\n            else {\n                this.notAllowedFiles.push({\n                    fileName: fileList[i].name,\n                    fileSize: this.convertSize(fileList[i].size),\n                    errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\n                });\n            }\n        }\n        // If there's any allowedFiles.\n        if (this.allowedFiles.length > 0) {\n            this.enableUploadBtn = true;\n            // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n            if (this.theme === 'attachPin' || this.autoUpload) {\n                this.uploadFiles();\n            }\n        }\n        else {\n            this.enableUploadBtn = false;\n        }\n        this.uploadMsg = false;\n        this.uploadStarted = false;\n        this.uploadPercent = 0;\n        event.target.value = null;\n    }\n    uploadFiles() {\n        this.progressBarShow = true;\n        this.uploadStarted = true;\n        this.notAllowedFiles = [];\n        let isError = false;\n        this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n        const formData = new FormData();\n        // Add data to be sent in this request\n        this.allowedFiles.forEach((file, i) => {\n            formData.append(this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''), this.allowedFiles[i]);\n        });\n        /*\n        Not Working, Headers null\n        // Contruct Headers\n        const headers = new HttpHeaders();\n        for (const key of Object.keys(this.headers)) {\n          headers.append(key, this.headers[key]);\n        }\n    \n        // Contruct Params\n        const params = new HttpParams();\n        for (const key of Object.keys(this.params)) {\n          params.append(key, this.params[key]);\n        } */\n        this.http\n            .request(this.method.toUpperCase(), this.uploadAPI, {\n            body: formData,\n            reportProgress: true,\n            observe: 'events',\n            headers: this.headers,\n            params: this.params,\n            responseType: this.responseType,\n            withCredentials: this.withCredentials,\n        })\n            .subscribe((event) => {\n            // Upload Progress\n            if (event.type === HttpEventType.UploadProgress) {\n                this.enableUploadBtn = false; // button should be disabled if process uploading\n                const currentDone = event.loaded / event.total;\n                this.uploadPercent = Math.round((event.loaded / event.total) * 100);\n            }\n            else if (event.type === HttpEventType.Response) {\n                if (event.status === 200 || event.status === 201) {\n                    // Success\n                    this.progressBarShow = false;\n                    this.enableUploadBtn = false;\n                    this.uploadMsg = true;\n                    this.afterUpload = true;\n                    if (!isError) {\n                        this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                        this.uploadMsgClass = 'text-success lead';\n                    }\n                }\n                else {\n                    // Failure\n                    isError = true;\n                    this.handleErrors();\n                }\n                this.ApiResponse.emit(event);\n            }\n            else {\n                //console.log('Event Other: ', event);\n            }\n        }, (error) => {\n            // Failure\n            isError = true;\n            this.handleErrors();\n            this.ApiResponse.emit(error);\n        });\n    }\n    handleErrors() {\n        this.progressBarShow = false;\n        this.enableUploadBtn = false;\n        this.uploadMsg = true;\n        this.afterUpload = true;\n        this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n        this.uploadMsgClass = 'text-danger lead';\n    }\n    removeFile(i, sf_na) {\n        if (sf_na === 'sf') {\n            this.allowedFiles.splice(i, 1);\n            this.Caption.splice(i, 1);\n        }\n        else {\n            this.notAllowedFiles.splice(i, 1);\n        }\n        if (this.allowedFiles.length === 0) {\n            this.enableUploadBtn = false;\n        }\n    }\n    convertSize(fileSize) {\n        return fileSize < 1024000\n            ? (fileSize / 1024).toFixed(2) + ' KB'\n            : (fileSize / 1024000).toFixed(2) + ' MB';\n    }\n    attachpinOnclick() {\n        const element = document.getElementById('sel' + this.id);\n        if (element !== null) {\n            element.click();\n        }\n    }\n    drop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.onChange(event);\n    }\n    allowDrop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'copy';\n    }\n}\nAngularFileUploaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderComponent, deps: [{ token: i1.HttpClient, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\nAngularFileUploaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.8\", type: AngularFileUploaderComponent, selector: \"angular-file-uploader\", inputs: { config: \"config\", resetUpload: \"resetUpload\" }, outputs: { ApiResponse: \"ApiResponse\", fileSelected: \"fileSelected\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\" *ngIf=\\\"(theme !== 'attachPin')\\\" id=\\\"default\\\">\\n\\n  <!-- Drag n Drop theme Starts -->\\n  <div *ngIf=\\\"theme == 'dragNDrop'\\\" id=\\\"dragNDrop\\\"\\n    [ngClass]=\\\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\\\" class=\\\"dragNDrop\\\">\\n    <div style=\\\"position:relative;\\\">\\n      <div id=\\\"div1\\\" class=\\\"div1 afu-dragndrop-box\\\" (drop)=\\\"drop($event)\\\" (dragover)=\\\"allowDrop($event)\\\">\\n        <p class=\\\"afu-dragndrop-text\\\">{{replaceTexts?.dragNDropBox}}</p>\\n      </div>\\n      <!-- <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span> -->\\n    </div>\\n  </div>\\n  <!-- Drag n Drop theme Ends -->\\n\\n  <label for=\\\"sel{{id}}\\\" class=\\\"btn btn-primary btn-sm afu-select-btn\\\" [ngClass]=\\\"progressBarShow ? 'disabled' : null\\\"\\n    *ngIf=\\\"!hideSelectBtn\\\">{{replaceTexts?.selectFileBtn}}</label>\\n  <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" style=\\\"display: none\\\" *ngIf=\\\"!hideSelectBtn\\\" [disabled]=\\\"progressBarShow\\\"\\n    (change)=\\\"onChange($event)\\\" title=\\\"Select file\\\" name=\\\"files[]\\\" [accept]=formatsAllowed\\n    [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n  <button class=\\\"btn btn-info btn-sm resetBtn afu-reset-btn\\\" (click)=\\\"resetFileUpload()\\\" *ngIf=\\\"!hideResetBtn\\\"\\n    [disabled]=\\\"progressBarShow\\\">{{replaceTexts?.resetBtn}}</button>\\n  <br *ngIf=\\\"!hideSelectBtn\\\">\\n  <p class=\\\"constraints-info afu-constraints-info\\\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\\n    {{(convertSize(maxSize))}}\\n  </p>\\n  <!--Allowed file list-->\\n  <div class=\\\"row afu-valid-file\\\" *ngFor=\\\"let sf of allowedFiles;let i=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span class=\\\"text-primary\\\">{{sf.name}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\\n    <!--  <input class=\\\"col-xs-3 progress caption\\\"  type=\\\"text\\\"  placeholder=\\\"Caption..\\\"  [(ngModel)]=\\\"Caption[i]\\\"  *ngIf=\\\"!uploadStarted\\\"/> -->\\n    <div class=\\\"progress col-xs-3 padMarg afu-progress-bar\\\"\\n      *ngIf=\\\"isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <a class=\\\"col-xs-1\\\" role=\\\"button\\\" (click)=\\\"removeFile(i,'sf')\\\" *ngIf=\\\"!uploadStarted\\\"><i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n  <!--Not Allowed file list-->\\n  <div class=\\\"row text-danger afu-invalid-file\\\" *ngFor=\\\"let na of notAllowedFiles;let j=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span>{{na['fileName']}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{na['fileSize']}})</strong></p>\\n    <p class=\\\"col-xs-3 \\\">{{na['errorMsg']}}</p>\\n    <a class=\\\"col-xs-1 delFileIcon\\\" role=\\\"button\\\" (click)=\\\"removeFile(j,'na')\\\" *ngIf=\\\"!uploadStarted\\\">&nbsp;<i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n\\n  <p *ngIf=\\\"uploadMsg\\\" class=\\\"{{uploadMsgClass}} + afu-upload-status\\\">{{uploadMsgText}}\\n  <p>\\n  <div *ngIf=\\\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n    <div class=\\\"progress col-xs-4 padMarg afu-progress-bar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <br>\\n    <br>\\n  </div>\\n  <button class=\\\"btn btn-success afu-upload-btn\\\" type=\\\"button\\\" (click)=\\\"uploadFiles()\\\"\\n    [disabled]=\\\"!enableUploadBtn && progressBarShow\\\" *ngIf=\\\"!autoUpload\\\">{{replaceTexts?.uploadBtn}}</button>\\n  <br>\\n</div>\\n\\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\\n<div *ngIf=\\\"theme == 'attachPin'\\\" id=\\\"attachPin\\\">\\n  <div style=\\\"position:relative;padding-left:6px\\\">\\n    <a class='btn up_btn afu-attach-pin' (click)=\\\"attachpinOnclick()\\\">\\n      {{replaceTexts?.attachPinBtn}}\\n      <i class=\\\"fa fa-paperclip\\\" aria-hidden=\\\"true\\\"></i>\\n      <!-- <p style=\\\"margin-top:10px\\\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\\n      <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" (change)=\\\"onChange($event)\\\" style=\\\"display: none\\\" title=\\\"Select file\\\"\\n        name=\\\"files[]\\\" [accept]=formatsAllowed [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n      <br>\\n    </a>\\n    &nbsp;\\n    <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span>\\n  </div>\\n</div>\", styles: [\".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid rgb(92,91,91);border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.selectBtnDisabled{border:1px solid #999999;background-color:#ccc;color:#666;cursor:no-drop}.dragNDrop .div1{display:border-box;border:2px dashed rgb(92,91,91);height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width: 620px){.caption{padding:0}}@media screen and (max-width: 510px){.sizeC{width:25%}}@media screen and (max-width: 260px){.sizeC,.caption{font-size:10px}}.resetBtn{margin-left:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'angular-file-uploader', template: \"<div class=\\\"container\\\" *ngIf=\\\"(theme !== 'attachPin')\\\" id=\\\"default\\\">\\n\\n  <!-- Drag n Drop theme Starts -->\\n  <div *ngIf=\\\"theme == 'dragNDrop'\\\" id=\\\"dragNDrop\\\"\\n    [ngClass]=\\\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\\\" class=\\\"dragNDrop\\\">\\n    <div style=\\\"position:relative;\\\">\\n      <div id=\\\"div1\\\" class=\\\"div1 afu-dragndrop-box\\\" (drop)=\\\"drop($event)\\\" (dragover)=\\\"allowDrop($event)\\\">\\n        <p class=\\\"afu-dragndrop-text\\\">{{replaceTexts?.dragNDropBox}}</p>\\n      </div>\\n      <!-- <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span> -->\\n    </div>\\n  </div>\\n  <!-- Drag n Drop theme Ends -->\\n\\n  <label for=\\\"sel{{id}}\\\" class=\\\"btn btn-primary btn-sm afu-select-btn\\\" [ngClass]=\\\"progressBarShow ? 'disabled' : null\\\"\\n    *ngIf=\\\"!hideSelectBtn\\\">{{replaceTexts?.selectFileBtn}}</label>\\n  <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" style=\\\"display: none\\\" *ngIf=\\\"!hideSelectBtn\\\" [disabled]=\\\"progressBarShow\\\"\\n    (change)=\\\"onChange($event)\\\" title=\\\"Select file\\\" name=\\\"files[]\\\" [accept]=formatsAllowed\\n    [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n  <button class=\\\"btn btn-info btn-sm resetBtn afu-reset-btn\\\" (click)=\\\"resetFileUpload()\\\" *ngIf=\\\"!hideResetBtn\\\"\\n    [disabled]=\\\"progressBarShow\\\">{{replaceTexts?.resetBtn}}</button>\\n  <br *ngIf=\\\"!hideSelectBtn\\\">\\n  <p class=\\\"constraints-info afu-constraints-info\\\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\\n    {{(convertSize(maxSize))}}\\n  </p>\\n  <!--Allowed file list-->\\n  <div class=\\\"row afu-valid-file\\\" *ngFor=\\\"let sf of allowedFiles;let i=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span class=\\\"text-primary\\\">{{sf.name}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\\n    <!--  <input class=\\\"col-xs-3 progress caption\\\"  type=\\\"text\\\"  placeholder=\\\"Caption..\\\"  [(ngModel)]=\\\"Caption[i]\\\"  *ngIf=\\\"!uploadStarted\\\"/> -->\\n    <div class=\\\"progress col-xs-3 padMarg afu-progress-bar\\\"\\n      *ngIf=\\\"isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <a class=\\\"col-xs-1\\\" role=\\\"button\\\" (click)=\\\"removeFile(i,'sf')\\\" *ngIf=\\\"!uploadStarted\\\"><i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n  <!--Not Allowed file list-->\\n  <div class=\\\"row text-danger afu-invalid-file\\\" *ngFor=\\\"let na of notAllowedFiles;let j=index\\\">\\n    <p class=\\\"col-xs-3 textOverflow\\\"><span>{{na['fileName']}}</span></p>\\n    <p class=\\\"col-xs-3 padMarg sizeC\\\"><strong>({{na['fileSize']}})</strong></p>\\n    <p class=\\\"col-xs-3 \\\">{{na['errorMsg']}}</p>\\n    <a class=\\\"col-xs-1 delFileIcon\\\" role=\\\"button\\\" (click)=\\\"removeFile(j,'na')\\\" *ngIf=\\\"!uploadStarted\\\">&nbsp;<i\\n        class=\\\"fa fa-times\\\"></i></a>\\n  </div>\\n\\n  <p *ngIf=\\\"uploadMsg\\\" class=\\\"{{uploadMsgClass}} + afu-upload-status\\\">{{uploadMsgText}}\\n  <p>\\n  <div *ngIf=\\\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\\\">\\n    <div class=\\\"progress col-xs-4 padMarg afu-progress-bar\\\">\\n      <span class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\"\\n        [ngStyle]=\\\"{'width':uploadPercent+'%'}\\\">{{uploadPercent}}%</span>\\n    </div>\\n    <br>\\n    <br>\\n  </div>\\n  <button class=\\\"btn btn-success afu-upload-btn\\\" type=\\\"button\\\" (click)=\\\"uploadFiles()\\\"\\n    [disabled]=\\\"!enableUploadBtn && progressBarShow\\\" *ngIf=\\\"!autoUpload\\\">{{replaceTexts?.uploadBtn}}</button>\\n  <br>\\n</div>\\n\\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\\n<div *ngIf=\\\"theme == 'attachPin'\\\" id=\\\"attachPin\\\">\\n  <div style=\\\"position:relative;padding-left:6px\\\">\\n    <a class='btn up_btn afu-attach-pin' (click)=\\\"attachpinOnclick()\\\">\\n      {{replaceTexts?.attachPinBtn}}\\n      <i class=\\\"fa fa-paperclip\\\" aria-hidden=\\\"true\\\"></i>\\n      <!-- <p style=\\\"margin-top:10px\\\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\\n      <input type=\\\"file\\\" id=\\\"sel{{id}}\\\" (change)=\\\"onChange($event)\\\" style=\\\"display: none\\\" title=\\\"Select file\\\"\\n        name=\\\"files[]\\\" [accept]=formatsAllowed [attr.multiple]=\\\"multiple ? '' : null\\\" />\\n      <br>\\n    </a>\\n    &nbsp;\\n    <span class='label label-info' id=\\\"upload-file-info{{id}}\\\">{{allowedFiles[0]?.name}}</span>\\n  </div>\\n</div>\", styles: [\".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid rgb(92,91,91);border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.selectBtnDisabled{border:1px solid #999999;background-color:#ccc;color:#666;cursor:no-drop}.dragNDrop .div1{display:border-box;border:2px dashed rgb(92,91,91);height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width: 620px){.caption{padding:0}}@media screen and (max-width: 510px){.sizeC{width:25%}}@media screen and (max-width: 260px){.sizeC,.caption{font-size:10px}}.resetBtn{margin-left:3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HttpClient, decorators: [{\n                        type: SkipSelf\n                    }] }];\n    }, propDecorators: { config: [{\n                type: Input\n            }], resetUpload: [{\n                type: Input\n            }], ApiResponse: [{\n                type: Output\n            }], fileSelected: [{\n                type: Output\n            }] } });\n\nclass AngularFileUploaderModule {\n}\nAngularFileUploaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFileUploaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, declarations: [AngularFileUploaderComponent], imports: [CommonModule,\n        HttpClientModule], exports: [AngularFileUploaderComponent] });\nAngularFileUploaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, imports: [[\n            CommonModule,\n            HttpClientModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: AngularFileUploaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        HttpClientModule,\n                    ],\n                    declarations: [AngularFileUploaderComponent],\n                    exports: [AngularFileUploaderComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-file-uploader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFileUploaderComponent, AngularFileUploaderModule };\n//# sourceMappingURL=angular-file-uploader.mjs.map\n","map":{"version":3,"file":"angular-file-uploader.mjs","sources":["../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.ts","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.html","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.module.ts","../../../projects/angular-file-uploader/src/public-api.ts","../../../projects/angular-file-uploader/src/angular-file-uploader.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  ReplaceTexts,\n  AngularFileUploaderConfig,\n  UploadInfo,\n  UploadApi,\n} from './angular-file-uploader.types';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpEventType,\n} from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'angular-file-uploader',\n  templateUrl: './angular-file-uploader.component.html',\n  styleUrls: ['./angular-file-uploader.component.css'],\n})\nexport class AngularFileUploaderComponent implements OnChanges {\n  // Inputs\n  @Input()\n  config: AngularFileUploaderConfig;\n\n  @Input()\n  resetUpload = false;\n\n  // Outputs\n  @Output()\n  ApiResponse = new EventEmitter();\n\n  @Output()\n  fileSelected: EventEmitter<UploadInfo[]> = new EventEmitter<UploadInfo[]>();\n\n  // Properties\n  theme: string;\n  id: number;\n  hideProgressBar: boolean;\n  maxSize: number;\n  uploadAPI: string;\n  method: string;\n  formatsAllowed: string;\n  formatsAllowedText: string;\n  multiple: boolean;\n  headers: HttpHeaders | { [header: string]: string | string[] };\n  params: HttpParams | { [param: string]: string | string[] };\n  responseType: 'json' | 'arraybuffer' | 'blob' | 'text';\n  hideResetBtn: boolean;\n  hideSelectBtn: boolean;\n  allowedFiles: File[] = [];\n  notAllowedFiles: {\n    fileName: string;\n    fileSize: string;\n    errorMsg: string;\n  }[] = [];\n  Caption: string[] = [];\n  isAllowedFileSingle = true;\n  progressBarShow = false;\n  enableUploadBtn = false;\n  uploadMsg = false;\n  afterUpload = false;\n  uploadStarted = false;\n  uploadMsgText: string;\n  uploadMsgClass: string;\n  uploadPercent: number;\n  replaceTexts: ReplaceTexts;\n  currentUploads: any[] = [];\n  fileNameIndex = true;\n  withCredentials = false;\n  autoUpload = false;\n\n  private idDate: number = +new Date();\n\n  constructor(@SkipSelf() private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Track changes in Configuration and see if user has even provided Configuration.\n    if (changes.config && this.config) {\n      // Assign User Configurations to Library Properties.\n      this.theme = this.config.theme || '';\n      this.id =\n        this.config.id ||\n        parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\n          Math.floor(Math.random() * 20) * 10000;\n      this.hideProgressBar = this.config.hideProgressBar || false;\n      this.hideResetBtn = this.config.hideResetBtn || false;\n      this.hideSelectBtn = this.config.hideSelectBtn || false;\n      this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n      this.uploadAPI = this.config.uploadAPI.url;\n      this.method = this.config.uploadAPI.method || 'POST';\n      this.formatsAllowed = this.config.formatsAllowed || '*';\n      this.formatsAllowedText =\n        this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n      this.multiple = this.config.multiple || false;\n      this.headers = this.config.uploadAPI.headers || {};\n      this.params = this.config.uploadAPI.params || {};\n      this.responseType = this.config.uploadAPI.responseType || 'json';\n      this.withCredentials = this.config.uploadAPI.withCredentials || false;\n      this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n      this.autoUpload = this.config.autoUpload || false;\n\n      this.replaceTexts = {\n        selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n        resetBtn: 'Reset',\n        uploadBtn: 'Upload',\n        dragNDropBox: 'Drag N Drop',\n        attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n        afterUploadMsg_success: 'Successfully Uploaded !',\n        afterUploadMsg_error: 'Upload Failed !',\n        sizeLimit: 'Size Limit',\n      }; // default replaceText.\n      if (this.config.replaceTexts) {\n        // updated replaceText if user has provided any.\n        this.replaceTexts = {\n          ...this.replaceTexts,\n          ...this.config.replaceTexts,\n        };\n      }\n    }\n\n    // Reset when resetUpload value changes from false to true.\n    if (changes.resetUpload) {\n      if (changes.resetUpload.currentValue === true) {\n        this.resetFileUpload();\n      }\n    }\n  }\n\n  // Reset following properties.\n  resetFileUpload() {\n    this.allowedFiles = [];\n    this.Caption = [];\n    this.notAllowedFiles = [];\n    this.uploadMsg = false;\n    this.enableUploadBtn = false;\n  }\n\n  // When user selects files.\n  onChange(event: any) {\n    this.fileSelected.emit(event);\n    this.notAllowedFiles = [];\n    const fileExtRegExp: RegExp = /(?:\\.([^.]+))?$/;\n    let fileList: FileList;\n\n    if (this.afterUpload || !this.multiple) {\n      this.allowedFiles = [];\n      this.Caption = [];\n      this.afterUpload = false;\n    }\n\n    if (event.type === 'drop') {\n      fileList = event.dataTransfer.files;\n    } else {\n      fileList = event.target.files || event.srcElement.files;\n    }\n\n    // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n    for (let i = 0; i < fileList.length; i++) {\n      const currentFileExt = fileExtRegExp\n        .exec(fileList[i].name)[1]\n        .toLowerCase(); // Get file extension.\n      const isFormatValid = this.formatsAllowed.includes('*')\n        ? true\n        : this.formatsAllowed.includes(currentFileExt);\n\n      const isSizeValid = fileList[i].size <= this.maxSize;\n\n      // Check whether current file format and size is correct as specified in the configurations.\n      if (isFormatValid && isSizeValid) {\n        this.allowedFiles.push(fileList[i]);\n      } else {\n        this.notAllowedFiles.push({\n          fileName: fileList[i].name,\n          fileSize: this.convertSize(fileList[i].size),\n          errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\n        });\n      }\n    }\n\n    // If there's any allowedFiles.\n    if (this.allowedFiles.length > 0) {\n      this.enableUploadBtn = true;\n      // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n      if (this.theme === 'attachPin' || this.autoUpload) {\n        this.uploadFiles();\n      }\n    } else {\n      this.enableUploadBtn = false;\n    }\n\n    this.uploadMsg = false;\n    this.uploadStarted = false;\n    this.uploadPercent = 0;\n    event.target.value = null;\n  }\n\n  uploadFiles() {\n    this.progressBarShow = true;\n    this.uploadStarted = true;\n    this.notAllowedFiles = [];\n    let isError = false;\n    this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n    const formData = new FormData();\n\n    // Add data to be sent in this request\n    this.allowedFiles.forEach((file, i) => {\n      formData.append(\n        this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''),\n        this.allowedFiles[i]\n      );\n    });\n\n    /*\n    Not Working, Headers null\n    // Contruct Headers\n    const headers = new HttpHeaders();\n    for (const key of Object.keys(this.headers)) {\n      headers.append(key, this.headers[key]);\n    }\n\n    // Contruct Params\n    const params = new HttpParams();\n    for (const key of Object.keys(this.params)) {\n      params.append(key, this.params[key]);\n    } */\n\n    this.http\n      .request(this.method.toUpperCase(), this.uploadAPI, {\n        body: formData,\n        reportProgress: true,\n        observe: 'events',\n        headers: this.headers,\n        params: this.params,\n        responseType: this.responseType,\n        withCredentials: this.withCredentials,\n      })\n      .subscribe(\n        (event) => {\n          // Upload Progress\n          if (event.type === HttpEventType.UploadProgress) {\n            this.enableUploadBtn = false; // button should be disabled if process uploading\n            const currentDone = event.loaded / event.total;\n            this.uploadPercent = Math.round((event.loaded / event.total) * 100);\n          } else if (event.type === HttpEventType.Response) {\n            if (event.status === 200 || event.status === 201) {\n              // Success\n              this.progressBarShow = false;\n              this.enableUploadBtn = false;\n              this.uploadMsg = true;\n              this.afterUpload = true;\n              if (!isError) {\n                this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                this.uploadMsgClass = 'text-success lead';\n              }\n            } else {\n              // Failure\n              isError = true;\n              this.handleErrors();\n            }\n\n            this.ApiResponse.emit(event);\n          } else {\n            //console.log('Event Other: ', event);\n          }\n        },\n        (error) => {\n          // Failure\n          isError = true;\n          this.handleErrors();\n          this.ApiResponse.emit(error);\n        }\n      );\n  }\n\n  handleErrors() {\n    this.progressBarShow = false;\n    this.enableUploadBtn = false;\n    this.uploadMsg = true;\n    this.afterUpload = true;\n    this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n    this.uploadMsgClass = 'text-danger lead';\n  }\n\n  removeFile(i: any, sf_na: any) {\n    if (sf_na === 'sf') {\n      this.allowedFiles.splice(i, 1);\n      this.Caption.splice(i, 1);\n    } else {\n      this.notAllowedFiles.splice(i, 1);\n    }\n\n    if (this.allowedFiles.length === 0) {\n      this.enableUploadBtn = false;\n    }\n  }\n\n  convertSize(fileSize: number): string {\n    return fileSize < 1024000\n      ? (fileSize / 1024).toFixed(2) + ' KB'\n      : (fileSize / 1024000).toFixed(2) + ' MB';\n  }\n\n  attachpinOnclick() {\n    const element = document.getElementById('sel' + this.id);\n    if (element !== null) {\n      element.click();\n    }\n  }\n\n  drop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    this.onChange(event);\n  }\n\n  allowDrop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\n","<div class=\"container\" *ngIf=\"(theme !== 'attachPin')\" id=\"default\">\n\n  <!-- Drag n Drop theme Starts -->\n  <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\"\n    [ngClass]=\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\" class=\"dragNDrop\">\n    <div style=\"position:relative;\">\n      <div id=\"div1\" class=\"div1 afu-dragndrop-box\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n        <p class=\"afu-dragndrop-text\">{{replaceTexts?.dragNDropBox}}</p>\n      </div>\n      <!-- <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span> -->\n    </div>\n  </div>\n  <!-- Drag n Drop theme Ends -->\n\n  <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm afu-select-btn\" [ngClass]=\"progressBarShow ? 'disabled' : null\"\n    *ngIf=\"!hideSelectBtn\">{{replaceTexts?.selectFileBtn}}</label>\n  <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" *ngIf=\"!hideSelectBtn\" [disabled]=\"progressBarShow\"\n    (change)=\"onChange($event)\" title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed\n    [attr.multiple]=\"multiple ? '' : null\" />\n  <button class=\"btn btn-info btn-sm resetBtn afu-reset-btn\" (click)=\"resetFileUpload()\" *ngIf=\"!hideResetBtn\"\n    [disabled]=\"progressBarShow\">{{replaceTexts?.resetBtn}}</button>\n  <br *ngIf=\"!hideSelectBtn\">\n  <p class=\"constraints-info afu-constraints-info\">{{formatsAllowedText}} {{replaceTexts?.sizeLimit}}:\n    {{(convertSize(maxSize))}}\n  </p>\n  <!--Allowed file list-->\n  <div class=\"row afu-valid-file\" *ngFor=\"let sf of allowedFiles;let i=index\">\n    <p class=\"col-xs-3 textOverflow\"><span class=\"text-primary\">{{sf.name}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n    <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"!uploadStarted\"/> -->\n    <div class=\"progress col-xs-3 padMarg afu-progress-bar\"\n      *ngIf=\"isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"!uploadStarted\"><i\n        class=\"fa fa-times\"></i></a>\n  </div>\n  <!--Not Allowed file list-->\n  <div class=\"row text-danger afu-invalid-file\" *ngFor=\"let na of notAllowedFiles;let j=index\">\n    <p class=\"col-xs-3 textOverflow\"><span>{{na['fileName']}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{na['fileSize']}})</strong></p>\n    <p class=\"col-xs-3 \">{{na['errorMsg']}}</p>\n    <a class=\"col-xs-1 delFileIcon\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"!uploadStarted\">&nbsp;<i\n        class=\"fa fa-times\"></i></a>\n  </div>\n\n  <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}} + afu-upload-status\">{{uploadMsgText}}\n  <p>\n  <div *ngIf=\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n    <div class=\"progress col-xs-4 padMarg afu-progress-bar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <br>\n    <br>\n  </div>\n  <button class=\"btn btn-success afu-upload-btn\" type=\"button\" (click)=\"uploadFiles()\"\n    [disabled]=\"!enableUploadBtn && progressBarShow\" *ngIf=\"!autoUpload\">{{replaceTexts?.uploadBtn}}</button>\n  <br>\n</div>\n\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\n  <div style=\"position:relative;padding-left:6px\">\n    <a class='btn up_btn afu-attach-pin' (click)=\"attachpinOnclick()\">\n      {{replaceTexts?.attachPinBtn}}\n      <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n      <!-- <p style=\"margin-top:10px\">({{formatsAllowedText}}) Size limit- {{(convertSize(maxSize))}}</p> -->\n      <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\"\n        name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n      <br>\n    </a>\n    &nbsp;\n    <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularFileUploaderComponent } from './angular-file-uploader.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n  ],\n  declarations: [AngularFileUploaderComponent],\n  exports: [AngularFileUploaderComponent]\n})\nexport class AngularFileUploaderModule { }\n","/*\n * Public API Surface of angular-file-uploader\n */\n\nexport * from './lib/angular-file-uploader.component';\nexport * from './lib/angular-file-uploader.module';\nexport * from './lib/angular-file-uploader.types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}