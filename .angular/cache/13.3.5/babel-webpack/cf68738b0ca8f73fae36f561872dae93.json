{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, SkipSelf, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpEventType, HttpClientModule } from '@angular/common/http';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction AngularFileUploaderComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"div\", 15);\n    i0.ɵɵlistener(\"drop\", function AngularFileUploaderComponent_div_0_div_1_Template_div_drop_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.drop($event);\n    })(\"dragover\", function AngularFileUploaderComponent_div_0_div_1_Template_div_dragover_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.allowDrop($event);\n    });\n    i0.ɵɵelementStart(3, \"p\", 16);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.hideSelectBtn && ctx_r2.hideResetBtn ? null : \"dragNDropBtmPad\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.replaceTexts == null ? null : ctx_r2.replaceTexts.dragNDropBox);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"sel\", ctx_r3.id, \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.progressBarShow ? \"disabled\" : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.replaceTexts == null ? null : ctx_r3.replaceTexts.selectFileBtn);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 18);\n    i0.ɵɵlistener(\"change\", function AngularFileUploaderComponent_div_0_input_3_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"sel\", ctx_r4.id, \"\");\n    i0.ɵɵproperty(\"disabled\", ctx_r4.progressBarShow)(\"accept\", ctx_r4.formatsAllowed);\n    i0.ɵɵattribute(\"multiple\", ctx_r4.multiple ? \"\" : null);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AngularFileUploaderComponent_div_0_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.resetFileUpload();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r5.progressBarShow);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.replaceTexts == null ? null : ctx_r5.replaceTexts.resetBtn);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_br_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"br\");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"width\": a0\n  };\n};\n\nfunction AngularFileUploaderComponent_div_0_div_8_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"span\", 27);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r21.uploadPercent + \"%\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r21.uploadPercent, \"%\");\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_div_8_a_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 28);\n    i0.ɵɵlistener(\"click\", function AngularFileUploaderComponent_div_0_div_8_a_9_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const i_r20 = i0.ɵɵnextContext().index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.removeFile(i_r20, \"sf\");\n    });\n    i0.ɵɵelement(1, \"i\", 29);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"p\", 21)(2, \"span\", 22);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 23)(5, \"strong\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0 \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, AngularFileUploaderComponent_div_0_div_8_div_8_Template, 3, 4, \"div\", 24);\n    i0.ɵɵtemplate(9, AngularFileUploaderComponent_div_0_div_8_a_9_Template, 2, 0, \"a\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const sf_r19 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sf_r19.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r7.convertSize(sf_r19.size), \")\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isAllowedFileSingle && ctx_r7.progressBarShow && !ctx_r7.hideProgressBar);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.uploadStarted);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_div_9_a_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 33);\n    i0.ɵɵlistener(\"click\", function AngularFileUploaderComponent_div_0_div_9_a_9_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const j_r27 = i0.ɵɵnextContext().index;\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return ctx_r29.removeFile(j_r27, \"na\");\n    });\n    i0.ɵɵtext(1, \"\\u00A0\");\n    i0.ɵɵelement(2, \"i\", 29);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"p\", 21)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 23)(5, \"strong\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"p\", 31);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AngularFileUploaderComponent_div_0_div_9_a_9_Template, 3, 0, \"a\", 32);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const na_r26 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(na_r26[\"fileName\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"(\", na_r26[\"fileSize\"], \")\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(na_r26[\"errorMsg\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r8.uploadStarted);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"\", ctx_r9.uploadMsgClass, \" + afu-upload-status\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.uploadMsgText, \" \");\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 34)(2, \"span\", 27);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"br\")(5, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r10.uploadPercent + \"%\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r10.uploadPercent, \"%\");\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function AngularFileUploaderComponent_div_0_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return ctx_r32.uploadFiles();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r11.enableUploadBtn && ctx_r11.progressBarShow);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.replaceTexts == null ? null : ctx_r11.replaceTexts.uploadBtn);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, AngularFileUploaderComponent_div_0_div_1_Template, 5, 2, \"div\", 3);\n    i0.ɵɵtemplate(2, AngularFileUploaderComponent_div_0_label_2_Template, 2, 3, \"label\", 4);\n    i0.ɵɵtemplate(3, AngularFileUploaderComponent_div_0_input_3_Template, 1, 4, \"input\", 5);\n    i0.ɵɵtemplate(4, AngularFileUploaderComponent_div_0_button_4_Template, 2, 2, \"button\", 6);\n    i0.ɵɵtemplate(5, AngularFileUploaderComponent_div_0_br_5_Template, 1, 0, \"br\", 7);\n    i0.ɵɵelementStart(6, \"p\", 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, AngularFileUploaderComponent_div_0_div_8_Template, 10, 4, \"div\", 9);\n    i0.ɵɵtemplate(9, AngularFileUploaderComponent_div_0_div_9_Template, 10, 4, \"div\", 10);\n    i0.ɵɵtemplate(10, AngularFileUploaderComponent_div_0_p_10_Template, 2, 4, \"p\", 11);\n    i0.ɵɵelement(11, \"p\");\n    i0.ɵɵtemplate(12, AngularFileUploaderComponent_div_0_div_12_Template, 6, 4, \"div\", 7);\n    i0.ɵɵtemplate(13, AngularFileUploaderComponent_div_0_button_13_Template, 2, 2, \"button\", 12);\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.theme == \"dragNDrop\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hideSelectBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hideSelectBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hideResetBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hideSelectBtn);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"\", ctx_r0.formatsAllowedText, \" \", ctx_r0.replaceTexts == null ? null : ctx_r0.replaceTexts.sizeLimit, \": \", ctx_r0.convertSize(ctx_r0.maxSize), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.allowedFiles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.notAllowedFiles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadMsg);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isAllowedFileSingle && ctx_r0.progressBarShow && !ctx_r0.hideProgressBar);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.autoUpload);\n  }\n}\n\nfunction AngularFileUploaderComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 36)(1, \"div\", 37)(2, \"a\", 38);\n    i0.ɵɵlistener(\"click\", function AngularFileUploaderComponent_div_1_Template_a_click_2_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.attachpinOnclick();\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelement(4, \"i\", 39);\n    i0.ɵɵelementStart(5, \"input\", 40);\n    i0.ɵɵlistener(\"change\", function AngularFileUploaderComponent_div_1_Template_input_change_5_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return ctx_r36.onChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" \\u00A0 \");\n    i0.ɵɵelementStart(8, \"span\", 41);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.replaceTexts == null ? null : ctx_r1.replaceTexts.attachPinBtn, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"sel\", ctx_r1.id, \"\");\n    i0.ɵɵproperty(\"accept\", ctx_r1.formatsAllowed);\n    i0.ɵɵattribute(\"multiple\", ctx_r1.multiple ? \"\" : null);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"upload-file-info\", ctx_r1.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.allowedFiles[0] == null ? null : ctx_r1.allowedFiles[0].name);\n  }\n}\n\nlet AngularFileUploaderComponent = /*#__PURE__*/(() => {\n  class AngularFileUploaderComponent {\n    constructor(http) {\n      this.http = http;\n      this.resetUpload = false; // Outputs\n\n      this.ApiResponse = new EventEmitter();\n      this.fileSelected = new EventEmitter();\n      this.allowedFiles = [];\n      this.notAllowedFiles = [];\n      this.Caption = [];\n      this.isAllowedFileSingle = true;\n      this.progressBarShow = false;\n      this.enableUploadBtn = false;\n      this.uploadMsg = false;\n      this.afterUpload = false;\n      this.uploadStarted = false;\n      this.currentUploads = [];\n      this.fileNameIndex = true;\n      this.withCredentials = false;\n      this.autoUpload = false;\n      this.idDate = +new Date();\n    }\n\n    ngOnChanges(changes) {\n      // Track changes in Configuration and see if user has even provided Configuration.\n      if (changes.config && this.config) {\n        // Assign User Configurations to Library Properties.\n        this.theme = this.config.theme || '';\n        this.id = this.config.id || parseInt((this.idDate / 10000).toString().split('.')[1], 10) + Math.floor(Math.random() * 20) * 10000;\n        this.hideProgressBar = this.config.hideProgressBar || false;\n        this.hideResetBtn = this.config.hideResetBtn || false;\n        this.hideSelectBtn = this.config.hideSelectBtn || false;\n        this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n\n        this.uploadAPI = this.config.uploadAPI.url;\n        this.method = this.config.uploadAPI.method || 'POST';\n        this.formatsAllowed = this.config.formatsAllowed || '*';\n        this.formatsAllowedText = this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n        this.multiple = this.config.multiple || false;\n        this.headers = this.config.uploadAPI.headers || {};\n        this.params = this.config.uploadAPI.params || {};\n        this.responseType = this.config.uploadAPI.responseType || 'json';\n        this.withCredentials = this.config.uploadAPI.withCredentials || false;\n        this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n        this.autoUpload = this.config.autoUpload || false;\n        this.replaceTexts = {\n          selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n          resetBtn: 'Reset',\n          uploadBtn: 'Upload',\n          dragNDropBox: 'Drag N Drop',\n          attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n          afterUploadMsg_success: 'Successfully Uploaded !',\n          afterUploadMsg_error: 'Upload Failed !',\n          sizeLimit: 'Size Limit'\n        }; // default replaceText.\n\n        if (this.config.replaceTexts) {\n          // updated replaceText if user has provided any.\n          this.replaceTexts = Object.assign(Object.assign({}, this.replaceTexts), this.config.replaceTexts);\n        }\n      } // Reset when resetUpload value changes from false to true.\n\n\n      if (changes.resetUpload) {\n        if (changes.resetUpload.currentValue === true) {\n          this.resetFileUpload();\n        }\n      }\n    } // Reset following properties.\n\n\n    resetFileUpload() {\n      this.allowedFiles = [];\n      this.Caption = [];\n      this.notAllowedFiles = [];\n      this.uploadMsg = false;\n      this.enableUploadBtn = false;\n    } // When user selects files.\n\n\n    onChange(event) {\n      this.fileSelected.emit(event);\n      this.notAllowedFiles = [];\n      const fileExtRegExp = /(?:\\.([^.]+))?$/;\n      let fileList;\n\n      if (this.afterUpload || !this.multiple) {\n        this.allowedFiles = [];\n        this.Caption = [];\n        this.afterUpload = false;\n      }\n\n      if (event.type === 'drop') {\n        fileList = event.dataTransfer.files;\n      } else {\n        fileList = event.target.files || event.srcElement.files;\n      } // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n\n\n      let total = fileList.length;\n\n      for (let i = 0; i < total; i++) {\n        const file = fileList[i];\n        console.log(file);\n        const currentFileExt = fileExtRegExp.exec(file.name)[1].toLowerCase(); // Get file extension.\n\n        const isFormatValid = this.formatsAllowed.includes('*') ? true : this.formatsAllowed.includes(currentFileExt);\n        const isSizeValid = file.size <= this.maxSize; // Check whether current file format and size is correct as specified in the configurations.\n\n        if (isFormatValid && isSizeValid) {\n          this.allowedFiles.push(file);\n        } else {\n          this.notAllowedFiles.push({\n            fileName: file.name,\n            fileSize: this.convertSize(file.size),\n            errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size'\n          });\n        }\n      } // If there's any allowedFiles.\n\n\n      if (this.allowedFiles.length > 0) {\n        this.enableUploadBtn = true; // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n\n        if (this.theme === 'attachPin' || this.autoUpload) {\n          this.uploadFiles();\n        }\n      } else {\n        this.enableUploadBtn = false;\n      }\n\n      this.uploadMsg = false;\n      this.uploadStarted = false;\n      this.uploadPercent = 0;\n      event.target.value = null;\n    }\n\n    uploadFiles() {\n      this.progressBarShow = true;\n      this.uploadStarted = true;\n      this.notAllowedFiles = [];\n      let isError = false;\n      this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n      const formData = new FormData(); // Add data to be sent in this request\n\n      this.allowedFiles.forEach((file, i) => {\n        formData.append(this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''), this.allowedFiles[i]);\n      });\n      /*\n      Not Working, Headers null\n      // Contruct Headers\n      const headers = new HttpHeaders();\n      for (const key of Object.keys(this.headers)) {\n        headers.append(key, this.headers[key]);\n      }\n           // Contruct Params\n      const params = new HttpParams();\n      for (const key of Object.keys(this.params)) {\n        params.append(key, this.params[key]);\n      } */\n\n      this.http.request(this.method.toUpperCase(), this.uploadAPI, {\n        body: formData,\n        reportProgress: true,\n        observe: 'events',\n        headers: this.headers,\n        params: this.params,\n        responseType: this.responseType,\n        withCredentials: this.withCredentials\n      }).subscribe(event => {\n        // Upload Progress\n        if (event.type === HttpEventType.UploadProgress) {\n          this.enableUploadBtn = false; // button should be disabled if process uploading\n\n          const currentDone = event.loaded / event.total;\n          this.uploadPercent = Math.round(event.loaded / event.total * 100);\n        } else if (event.type === HttpEventType.Response) {\n          if (event.status === 200 || event.status === 201) {\n            // Success\n            this.progressBarShow = false;\n            this.enableUploadBtn = false;\n            this.uploadMsg = true;\n            this.afterUpload = true;\n\n            if (!isError) {\n              this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n              this.uploadMsgClass = 'text-success lead';\n            }\n          } else {\n            // Failure\n            isError = true;\n            this.handleErrors();\n          }\n\n          this.ApiResponse.emit(event);\n        } else {//console.log('Event Other: ', event);\n        }\n      }, error => {\n        // Failure\n        isError = true;\n        this.handleErrors();\n        this.ApiResponse.emit(error);\n      });\n    }\n\n    handleErrors() {\n      this.progressBarShow = false;\n      this.enableUploadBtn = false;\n      this.uploadMsg = true;\n      this.afterUpload = true;\n      this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n      this.uploadMsgClass = 'text-danger lead';\n    }\n\n    removeFile(i, sf_na) {\n      if (sf_na === 'sf') {\n        this.allowedFiles.splice(i, 1);\n        this.Caption.splice(i, 1);\n      } else {\n        this.notAllowedFiles.splice(i, 1);\n      }\n\n      if (this.allowedFiles.length === 0) {\n        this.enableUploadBtn = false;\n      }\n    }\n\n    convertSize(fileSize) {\n      return fileSize < 1024000 ? (fileSize / 1024).toFixed(2) + ' KB' : (fileSize / 1024000).toFixed(2) + ' MB';\n    }\n\n    attachpinOnclick() {\n      const element = document.getElementById('sel' + this.id);\n\n      if (element !== null) {\n        element.click();\n      }\n    }\n\n    drop(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.onChange(event);\n    }\n\n    allowDrop(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'copy';\n    }\n\n  }\n\n  AngularFileUploaderComponent.ɵfac = function AngularFileUploaderComponent_Factory(t) {\n    return new (t || AngularFileUploaderComponent)(i0.ɵɵdirectiveInject(i1.HttpClient, 4));\n  };\n\n  AngularFileUploaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AngularFileUploaderComponent,\n    selectors: [[\"angular-file-uploader\"]],\n    inputs: {\n      config: \"config\",\n      resetUpload: \"resetUpload\"\n    },\n    outputs: {\n      ApiResponse: \"ApiResponse\",\n      fileSelected: \"fileSelected\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"container\", \"id\", \"default\", 4, \"ngIf\"], [\"id\", \"attachPin\", 4, \"ngIf\"], [\"id\", \"default\", 1, \"container\"], [\"id\", \"dragNDrop\", \"class\", \"dragNDrop\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"btn btn-primary btn-sm afu-select-btn\", 3, \"for\", \"ngClass\", 4, \"ngIf\"], [\"type\", \"file\", \"style\", \"display: none\", \"title\", \"Select file\", \"name\", \"files[]\", 3, \"id\", \"disabled\", \"accept\", \"change\", 4, \"ngIf\"], [\"class\", \"btn btn-info btn-sm resetBtn afu-reset-btn\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"constraints-info\", \"afu-constraints-info\"], [\"class\", \"row afu-valid-file\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"row text-danger afu-invalid-file\", 4, \"ngFor\", \"ngForOf\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"btn btn-success afu-upload-btn\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"id\", \"dragNDrop\", 1, \"dragNDrop\", 3, \"ngClass\"], [2, \"position\", \"relative\"], [\"id\", \"dragNDropDiv\", 1, \"dragNDropDiv\", \"afu-dragndrop-box\", 3, \"drop\", \"dragover\"], [1, \"afu-dragndrop-text\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", \"afu-select-btn\", 3, \"for\", \"ngClass\"], [\"type\", \"file\", \"title\", \"Select file\", \"name\", \"files[]\", 2, \"display\", \"none\", 3, \"id\", \"disabled\", \"accept\", \"change\"], [1, \"btn\", \"btn-info\", \"btn-sm\", \"resetBtn\", \"afu-reset-btn\", 3, \"disabled\", \"click\"], [1, \"row\", \"afu-valid-file\"], [1, \"col\", \"textOverflow\"], [1, \"text-primary\"], [1, \"col-3\", \"padMarg\", \"sizeC\"], [\"class\", \"progress col-3 padMarg afu-progress-bar\", 4, \"ngIf\"], [\"class\", \"col-1\", \"role\", \"button\", 3, \"click\", 4, \"ngIf\"], [1, \"progress\", \"col-3\", \"padMarg\", \"afu-progress-bar\"], [\"role\", \"progressbar\", 1, \"progress-bar\", \"progress-bar-success\", 3, \"ngStyle\"], [\"role\", \"button\", 1, \"col-1\", 3, \"click\"], [1, \"fa-solid\", \"fa-xmark\"], [1, \"row\", \"text-danger\", \"afu-invalid-file\"], [1, \"col-3\"], [\"class\", \"col-1 delFileIcon\", \"role\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"role\", \"button\", 1, \"col-1\", \"delFileIcon\", 3, \"click\"], [1, \"progress\", \"col-xs-4\", \"padMarg\", \"afu-progress-bar\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"afu-upload-btn\", 3, \"disabled\", \"click\"], [\"id\", \"attachPin\"], [2, \"position\", \"relative\", \"padding-left\", \"6px\"], [1, \"btn\", \"up_btn\", \"afu-attach-pin\", 3, \"click\"], [1, \"fa-solid\", \"fa-paperclip\"], [\"type\", \"file\", \"title\", \"Select file\", \"name\", \"files[]\", 2, \"display\", \"none\", 3, \"id\", \"accept\", \"change\"], [1, \"label\", \"label-info\", 3, \"id\"]],\n    template: function AngularFileUploaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AngularFileUploaderComponent_div_0_Template, 15, 13, \"div\", 0);\n        i0.ɵɵtemplate(1, AngularFileUploaderComponent_div_1_Template, 10, 6, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.theme !== \"attachPin\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.theme == \"attachPin\");\n      }\n    },\n    directives: [i2.NgIf, i2.NgClass, i2.NgForOf, i2.NgStyle],\n    styles: [\".constraints-info[_ngcontent-%COMP%]{margin-top:10px;font-style:italic}.padMarg[_ngcontent-%COMP%]{padding:0;margin-bottom:0}.caption[_ngcontent-%COMP%]{margin-right:5px}.textOverflow[_ngcontent-%COMP%]{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn[_ngcontent-%COMP%]{color:#000;background-color:transparent;border:2px solid rgb(92,91,91);border-radius:22px}.delFileIcon[_ngcontent-%COMP%]{text-decoration:none;color:#ce0909}.selectBtnDisabled[_ngcontent-%COMP%]{border:1px solid #999999;background-color:#ccc;color:#666;cursor:no-drop}.dragNDrop[_ngcontent-%COMP%]   .dragNDropDiv[_ngcontent-%COMP%]{display:border-box;border:2px dashed rgb(92,91,91);height:6rem}.dragNDrop[_ngcontent-%COMP%]   .dragNDropDiv[_ngcontent-%COMP%] > p[_ngcontent-%COMP%]{text-align:center;font-weight:700;color:#5c5b5b;margin-top:2em}.dragNDropBtmPad[_ngcontent-%COMP%]{padding-bottom:2rem}@media screen and (max-width: 620px){.caption[_ngcontent-%COMP%]{padding:0}}@media screen and (max-width: 510px){.sizeC[_ngcontent-%COMP%]{width:25%}}@media screen and (max-width: 260px){.sizeC[_ngcontent-%COMP%], .caption[_ngcontent-%COMP%]{font-size:10px}}.resetBtn[_ngcontent-%COMP%]{margin-left:3px}\"]\n  });\n  return AngularFileUploaderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AngularFileUploaderModule = /*#__PURE__*/(() => {\n  class AngularFileUploaderModule {}\n\n  AngularFileUploaderModule.ɵfac = function AngularFileUploaderModule_Factory(t) {\n    return new (t || AngularFileUploaderModule)();\n  };\n\n  AngularFileUploaderModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AngularFileUploaderModule\n  });\n  AngularFileUploaderModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, HttpClientModule]]\n  });\n  return AngularFileUploaderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AngularFileUploaderModule, {\n    declarations: [AngularFileUploaderComponent],\n    imports: [CommonModule, HttpClientModule],\n    exports: [AngularFileUploaderComponent]\n  });\n})();\n/*\n * Public API Surface of angular-file-uploader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFileUploaderComponent, AngularFileUploaderModule }; //# sourceMappingURL=angular-file-uploader.mjs.map","map":null,"metadata":{},"sourceType":"module"}